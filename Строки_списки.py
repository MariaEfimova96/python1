'''str.capitalize() переводит первый символ строки str в верхний регистр, остальные — в нижний'''
# myStr='я СЕЙЧАС в отпуске'
# print(myStr.capitalize())
'''str.lower() переводит все буквенные символы оригинальной строки str в нижний регистр, возвращаемый результат
— преобразованная копия строки str. '''
# myStr='Я СЕЙЧАС в отпуске'
# print(myStr.lower())
'''str.upper() преобразует все буквенные символы строки str в верхний регистр, возвращаемый результат
— преобразованная копия строки str. '''
# myStr='Я СЕЙЧАС в отпуске'
# print(myStr.upper())
'''str.title() преобразует первые буквы каждого слова в строке str в верхний регистр (а остальные буквы слов переводит в нижний регистр), 
возвращаемый результат— преобразованная копия строки str.'''
# myStr='я сЕЙЧАС в отпУске'
# print(myStr.title())
'''tr.swapcase() преобразует буквенные символы строки str, 
меняя их регистр на противоположный, возвращаемый результат— преобразованная копия строки str.'''
# myStr='ВоТ И лЕтО ПрОшЛо'
# print(myStr.swapcase())
'''str.count(pattern [, startIndex [, endIndex]])— определяет количество вхождений фрагмента pattern в строку str 
(или в ее часть при задании диапазона поиска (с индекса startIndex … по индекс endIndex ….).'''
# myStr='Хали-гали, паратрупер, нам с тобою было супер. супер восемь, хали-гали, мы с тобой всю ночь летали'
# print(myStr.count('летали'))
# print(myStr.count('супер', 1, 88))
'''str.find(pattern [, startIndex [, endIndex]])— используется для поиска в строке str нужного фрагмента pattern, возвращаемый результат
— индекс начала первого вхождения фрагмента pattern в строку str или -1 в случае, если фрагмент pattern не входит в состав str.'''
# myStr='О-оу-и-я-и-ё Батарейка О-оу-и-я-и-ё Батарейка'
# print(myStr.find('Батарейка'))
# print(myStr.find('<Б>', 1, 13))
'''str.index(pattern [, startIndex [, endIndex]])— работа
метода аналогична методу .find(), отличие— в вызове исключения ValueError в случае, когда фрагмент pattern не найден (не входит в состав str).'''
# myStr='О-оу-и-я-и-ё Батарейка О-оу-и-я-и-ё Батарейка'
# print(myStr.index('Батарейка'))
# print(myStr.index('Б', 2, 20))
'''str.rfind(pattern [, startIndex [, endIndex]]— исполь-
зуется для поиска в строке str нужного фрагмента pattern, начиная с конца строки str, возвращаемый результат— индекс начала последнего вхождения фрагмента pattern в строку str или -1 в случае, если фрагмент pattern не входит в состав str. Для ограниче- ния диапазона поиска можно использовать параметры
startIndex и endIndex.'''
# myStr='В чёрном цилиндре В наряде старинном В город на праздник Путник очень спешил'
# print(myStr.rfind('Путник'))
# print(myStr.rfind('В', 0, 22))
# print(myStr.rindex('Путник'))#отличие— в вызове исключения ValueError в случае, когда фрагмент pattern не найден (не входит в состав str).
# print(myStr.rindex('В', 88,99))#отличие— в вызове исключения ValueError в случае, когда фрагмент pattern не найден (не входит в состав str).
'''str.endswith(pattern [, startIndex [, endIndex]])— определяет, заканчивается ли строка str указанным фрагментом pattern.'''
# myStr='В чёрном цилиндре В наряде старинном В город на праздник Путник очень спешил'
# print(myStr.endswith('л'))
# print(myStr.endswith('в',16))
# print(myStr.endswith('м',2,6))
'''str.startwith(pattern [, startIndex [, endIndex]])— определяет, начинается ли строка str с указанного фрагмента pattern.'''
# myStr='В чёрном цилиндре В наряде старинном В город на праздник Путник очень спешил'
# print(myStr.startswith('В'))
# print(myStr.startswith('в'))
# print(myStr.startswith('ц',9))
'''str.isalnum()— проверяет, состоит ли строка str только из буквенных и цифровых символов. '''
# myStr='1111'
# print(myStr.isalnum())
# myStr='Исноватретьесентября'
# print(myStr.isalnum())
# myStr='32 слона'
# print(myStr.isalnum())
'''str.isalpha()— проверяет, состоит ли строка str только из буквенных символов.'''
# myStr = '1111'
# print(myStr.isalpha())
# myStr = 'Отражение'
# print(myStr.isalpha())
# myStr = '23 регион'
# print(myStr.isalpha())
'''str.isdigit()— проверяет, состоит ли строка str только из цифровых символов (используется для проверки, является ли строка str числом). '''
# myStr = '122'
# print(myStr.isdigit())
# myStr = 'Отражение'
# print(myStr.isdigit())
# myStr = '23 регион'
# print(myStr.isdigit())
'''str.islower() проверяет, находятся ли все буквенные символы строки str в нижнем регистре 
(символы строки str, которые не являются буквой алфавита— игнорируются данной проверкой)'''
# myStr = '122привет'
# print(myStr.islower())
# myStr = 'ОтражениЕ'
# print(myStr.islower())
# myStr = '23 регион'
# print(myStr.islower())
'''str.isspace() проверяет, что в состав строки str входят только пробельные символы, к которым относятся символы пробела ' ', 
табуляции '\t' и перехода на новую строку '\n'. '''
# myStr = '\t  \n \t\t'
# print(myStr.isspace())
# myStr = ' '
# print(myStr.isspace())
# myStr = 'Добрый вечер'
# print(myStr.isspace())
'''str.istitle() проверяет, начинается ли каждое слово строки str с символа в верхнем регистре. '''
# myStr = 'Я бегу по выжженной земле'
# print(myStr.istitle())
# myStr = 'Я Бегу По Выжженной Земле'
# print(myStr.istitle())
# myStr = 'Я Бегу По Выжженной Земле 22'
# print(myStr.istitle())
# myStr = '22'
# print(myStr.istitle())
'''str.isupper() определяет, находятся ли все буквенные символы строки str в верхнем регистре.'''
# myStr = 'ПРИВЕТ АНДРЕЙ'
# print(myStr.isupper())
# myStr = 'ПриВет Андрей'
# print(myStr.isupper())
'''str.islower() определяет, находятся ли все буквенные символы строки str в нижнем регистре.'''
# myStr = 'ПРИВЕТ АНДРЕЙ'
# print(myStr.islower())
# myStr = 'привет андрей'
# print(myStr.islower())
'''str.center(width [, fillchar]) дополняет (расширяет) строку
str до указанной длины width, возвращаемый результат— расширенная копия строки str.
Если параметр fillchar указан, то он будет использован, как символ заполнения, иначе— отступы заполняются пробелами '''
# myStr = 'Привет'
# print(myStr.center(30))
# print(myStr.center(30, '^'))
# print(myStr.center(99))
'''str.expandtabs(tabsize = 8) возвращает копию строки
str, в которой каждый символ табуляции ('\t') заме- нен на пробел, количество которых задается через параметр tabsize.'''
# myStr = 'Я бегу по выжженной земле\tГермошлем захлопнув на ходу\tМой "Фантом" стрелою белой\tНа распластанном крыле\tС рёвом набирает высоту\tМой "Фантом" стрелою белой'
# print(myStr.expandtabs(tabsize = 17))
# print(myStr.expandtabs())
'''str.ljust(width [, fillchar]) возвращает выровненную по левому краю копию строки str указанной ширины width.'''
# myStr = 'Привет мой друг'
# print(myStr.ljust(20))
# print(myStr.ljust(90,'#'))
# print(myStr.ljust(7))
'''str.lstrip([characters]) возвращает копию строки str,
удаляя начальные символы (слева), указанные в качестве аргумента characters. Если параметр characters не указан, то удаляются символы пробел '''
# myStr = '@   Привет мой друг!    '
# print(myStr.lstrip())
# print(myStr.lstrip('@'))
'''Для аналогичного удаления завершающих символов (или пробелов) в строке справа предусмотрен метод str.rstrip([characters]).'''
# myStr = 'Привет мой друг!    '
# print(myStr.rstrip('!'))
'''Если необходимо удалить пробелы (или указанные символы) и с левой, и с правой стороны строки, то
используется метод str.strip([characters]).'''
# myStr = '!  Привет мой друг!    '
# print(myStr.strip('!'))
# '''метод str.zfill(width), который дополняет строку слева символами «0» ширины width.'''
# myStr = '7777'
# print(myStr.zfill(90))